create or replace trigger auto_incr_Stud
before insert on Student
for each row
declare
uroll number(8);
roll number(3);
y number;
begin
	select max(Univ_Roll) into uroll from Student where Year = :new.Year;
	select max(Student_Roll) into roll from Student where Year = :new.Year;
	select to_number(extract(year from sysdate)) - :new.Year into y from dual;
	case
	when uroll is NULL then
		uroll := 10000000 + y * 1000;
		uroll := uroll + 1;
	else
		uroll := uroll + 1;
	end case;
	:new.Univ_Roll := uroll;
	
	case
	when roll is NULL then
		roll := 1;
	else
		roll := roll + 1;
	end case;
	:new.Student_Roll := roll;
end;
/

create or replace trigger auto_incr_fac
before insert on Faculty
for each row
declare
fid number(4);
begin
	select max(Faculty_ID) into fid from Faculty;
	case
	when fid is null then
		fid := 1001;
	else
		fid := fid + 1;
	end case;
	:new.Faculty_ID := fid;
end;
/

create or replace trigger auto_check_rou
before insert or update on Routine
for each row
declare
	Cursor fac_cur is
		select Faculty_id from Faculty where (
		Course1 = :new.Course_No or 
		Course2 = :new.Course_No or
		Course3 = :new.Course_No );
	fid number;
begin
	open fac_cur;
	loop
		fetch fac_cur into fid;
		if(fid is null) then
				raise_application_error(-20001, 'No faculty takes the course.');
		end if;
		if(:new.Faculty_ID = fid) then
			exit;
		end if;
		if(:new.Faculty_ID != fid and fac_cur%notfound) then
			raise_application_error(-20001, 'Given faculty does not take the given course.');
		end if;
	end loop;
end; 
/

create or replace trigger auto_sum_attend
before insert or update
on Attendance
for each row
declare
p number;
begin
	p := 0;
	if(:new.Course1 is not null) then
		p := p + 1;
	end if;
	if(:new.Course2 is not null) then
		p := p + 1;
	end if;
	if(:new.Course3 is not null) then
		p := p + 1;
	end if;
	if(:new.Course4 is not null) then
		p := p + 1;
	end if;
	if(:new.Course5 is not null) then
		p := p + 1;
	end if;
	if(:new.Course6 is not null) then
		p := p + 1;
	end if;
	:new.Present := p; 
end; 
/